/*******************************************************************************************
* @Name         EndpointRevenueBatch 
* @Author       Apisero
* @Date         May 2023
* @Group        --
* @Description  Batch class to get EndPointRevenue data from AWS S3 and have it inserted to 
*               EndPointRevenue Object 
* JIRA Story    https://authcore.atlassian.net/browse/BIS-439 
*******************************************************************************************/
/* MODIFICATION LOG
* Version          Developer          Date               Description
*-------------------------------------------------------------------------------------------
*  1.0             Apisero          June 2023         Initial Creation   
*  2.0             Apisero          19-01-24          BIS-2390 Script to add Admin Editable Parameters in Custom Metadata 
*  3.0             Apisero          02-02-24          BIS-2420 Endpoint Revenue Fields are Converted Incorrectly by EndpointRevenueBatch script
*  4.0             Apisero          21-02-24          BIS-2427 Endpoint Revenue records do not sync when there is no Account or Platform Id
*  5.0             Apisero          27-02-24          BIS-2468 Endpoint Revenue Sync Creating ONLY 196 Records
*******************************************************************************************/

global class EndpointRevenueBatch implements Database.Batchable<SObject>,Database.AllowsCallouts,Database.stateful {
    string dateFormat = GlobalConstants.DATE_FORMAT;
    string endPointRevFilesNoOfDays = GlobalConstants.ENDPOINT_REV_FILES_NO_OF_DAYS;
    string prodDay = GlobalConstants.PROD_DAY;
    String exchangeEndpointRevenue = GlobalConstants.EXCHANGE_ENDPOINT_REVENUE;

    global Iterable<SObject> start(Database.BatchableContext BC) {
        // get STS credential from Amazon
        AWSConnect.StsAuthCredWrapper stsAuthCred = AWSConnect.getAwsStsAuthCred();

        //BIS-2390 : Setup Batch Configuration
        AWSConnectHelper.setupBatchConfigVariable();

        List<Endpoint_Revenue__c>  endPointRevenueUpsertList = new List<Endpoint_Revenue__c>();
        try{
            if(stsAuthCred != null){

                for(Integer i=0;i<AWSConnectHelper.noOfDays;i++){

                    string dateFormated = DateTime.newInstance((AWSConnectHelper.fileDateTime).year(),(AWSConnectHelper.fileDateTime).month(),(AWSConnectHelper.fileDateTime).day()-i).format(dateFormat);
                    String fileName = ProdDay +dateFormated+ exchangeEndpointRevenue +dateFormated+'.csv';
                    System.debug('fileName ' + fileName);
                    String fileDataFromS3 = AWSConnectHelper.getEndPointRevenueFileDataFromS3(stsAuthCred.accKey,stsAuthCred.secKey,stsAuthCred.accToken, fileName);
                    System.debug('fileDataFromS3 ' + fileDataFromS3);
                    if(!string.isBlank(fileDataFromS3)){
                        System.debug('fileDataFromS3 ' + fileDataFromS3);
                        List<Endpoint_Revenue__c>  endPointRevenueRecs = prepareEndpointRevenueDataSet(fileDataFromS3,fileName);
                        endpointRevenueUpsertList.addAll(endPointRevenueRecs);
                    } 
                }
            }
        }catch(Exception ex){
            DebugLogException.LogException(ex,'','Apex');
        }
        System.debug('@@'+endPointRevenueUpsertList.size());
        return endPointRevenueUpsertList;
    }
    
    /**************************************************************************************
* @Description  Wrapper class to encapsulate the results of the execute method in the
                EndpointRevenueBatch class. It includes lists for newly created
                Revenue_Daily__c records, Endpoint_Revenue__c records to update,
                and debug log records.
* @Example      ExecuteMethodResult result = new ExecuteMethodResult(revenueDailyRecords, endpointRecords, debugLogs);
**************************************************************************************/
    public class ExecuteMethodResult {
        public List<Revenue_Daily__c> revenueDailyRecordsToCreate;
        public List<Endpoint_Revenue__c> endpointRecordsToUpdate;
        public List<Sovrn_Debug_Log__c> debugLog;
    
        public ExecuteMethodResult(List<Revenue_Daily__c> revenueDailyRecordsToCreate, List<Endpoint_Revenue__c> endpointRecordsToUpdate, List<Sovrn_Debug_Log__c> debugLog) {
            this.revenueDailyRecordsToCreate = revenueDailyRecordsToCreate;
            this.endpointRecordsToUpdate = endpointRecordsToUpdate;
            this.debugLog = debugLog;
        }
    }
    
    /*******************************************************************************************************
* @Description  This method Process EndPointRevenue data from S3 and upsert to SF EndPointRevenue object
* @Param        BC(Database.BatchableContext),records(List<EndPoint_Revenue__c>)
* @Return       NA
* @Example      Standard interface method
********************************************************************************************************/
    global void execute(Database.BatchableContext BC, List<EndPoint_Revenue__c> endPointRecords) {
        try{
            Set<String> uniqueKeys = new Set<String>();
            Set<String> publisherNames = new Set<String>();
            
            for (Endpoint_Revenue__c endPointRecord : endPointRecords) {
                if(endPointRecord.Gross_Revenue__c >= 0.01){
                    String uniqueKeyFormula = String.valueOf(endPointRecord.Date__c) + '-' + 'EXCHANGE' + '-' + endPointRecord.Publisher_Name__c;
                    uniqueKeys.add(uniqueKeyFormula);
                    publisherNames.add(endPointRecord.Publisher_Name__c);
                }
            }
                        
            // Maps to store revenue daily, platform account and revenue summary records based on unique keys and publisher names
            Map<String, Revenue_Daily__c> revenueDailyMap = getRevenueDailyMap(uniqueKeys);
            Map<String, Sovrn_Platform_Account__c> platformAccountMap = getPlatformAccountMap(publisherNames);
            Map<String, Revenue_Summary__c> revenueSummaryMap = getRevenueSummaryMap(uniqueKeys);
                
            // Stores the revenue daily records that are to be created
            List<Revenue_Daily__c> revenueDailyRecordsToCreate = new List<Revenue_Daily__c>();
            // Endpoint records to update with Revenue Daily, Platform Id and Account
            List<Endpoint_Revenue__c> endpointRecordsToUpdate = new List<Endpoint_Revenue__c>();
            // Sovrn Debug logs that are to be created
            List<Sovrn_Debug_Log__c> debugLog = new List<Sovrn_Debug_Log__c>();

            
            // Process Endpoint Revenue Records
            ExecuteMethodResult result = processEndpointRecords(endPointRecords, revenueDailyMap, platformAccountMap, revenueSummaryMap);
            
            
            // Create new Revenue_Daily__c records
            if (!result.revenueDailyRecordsToCreate.isEmpty()) {
                upsert result.revenueDailyRecordsToCreate Unique_Key__c;
            }
    
            // Update the Endpoint_Revenue__c records with the new Revenue_Daily__c Ids if not already set
            for (Endpoint_Revenue__c endpointRecordToUpdate : result.endpointRecordsToUpdate) {
                if (endpointRecordToUpdate.Revenue_Daily__c == null) {
                    string uniqueKeyFormula = String.valueOf(endpointRecordToUpdate.Date__c)+ '-' + 'EXCHANGE' + '-' + endpointRecordToUpdate.Publisher_Name__c;
                    for (Revenue_Daily__c revenueDailyRecord : result.revenueDailyRecordsToCreate) {
                        if (revenueDailyRecord.Unique_Key__c == uniqueKeyFormula) {
                            endpointRecordToUpdate.Revenue_Daily__c = revenueDailyRecord.Id;
                        }
                    }
                }
            }
            
            // Insert debug log records
            if (!result.debugLog.isEmpty()) {
                insert result.debugLog;
            }
            
            //upsert EndPointRevenueData
            if(result.endpointRecordsToUpdate != null && result.endpointRecordsToUpdate.size() >0){
                upsertEndpointRevenue(result.endpointRecordsToUpdate);
            }
        }

        catch(Exception ex){
            DebugLogException.LogException(ex,'','Apex');
        }
    }

    global void finish(Database.BatchableContext BC){
        //send an email to team, if you wish to send status after batch is completed.
    }

    /**************************************************************************************
* @Description  Get data from file and create EndPointRevenue dataset
* @Param        fileData(string)
* @Return       List<Endpoint_Revenue__c>
* @Example      EndpointRevenueBatch.prepareEndpointRevenueDataSet(fileData);
**************************************************************************************/
    public List<Endpoint_Revenue__c> prepareEndpointRevenueDataSet(string fileData,String FileName) {
        List<Endpoint_Revenue__c>  endpointRevenueDataList = new List<Endpoint_Revenue__c>();

        string[] totalNoOfRecords  = fileData.split('\n');
        system.debug('1111111-------totalNoOfRecords.size()  ::: '+totalNoOfRecords.size() );       
        if(totalNoOfRecords.size() > 1){
            integer i = 0;
            for (string recs : totalNoOfRecords){
                if (i > 0){
                    string[] fieldData = recs.split(',');
                    if(fieldData.size() > 0){
                        Endpoint_Revenue__c endPointRevenue = new Endpoint_Revenue__c();
                        endPointRevenue.Date__c  = date.valueOf(fieldData[0]);  // day
                        endPointRevenue.Publisher_Name__c = fieldData[1]; // publisher_name
                        endPointRevenue.Endpoint_Text__c = fieldData[2];  //endpoint
                        endPointRevenue.Ad_Type__c = fieldData[3]; //adtype

                        // If contains scientific notation, converts to decimal format (e.g., '5.765358356686985E-4' to 0.0005765358356686985):
                        // Regex '([\\d.]+)[Ee]([-+]?\\d+)' captures mantissa and exponent.
                        // Replace with '$1e$2' reconstructs the decimal number using the captured groups.
                        endPointRevenue.Gross_Revenue__c = Decimal.valueOf(fieldData[4].replaceAll('([\\d.]+)[Ee]([-+]?\\d+)', '$1e$2')); //gross revenue
                        System.debug('Gross Revenue: ' + endPointRevenue.Gross_Revenue__c);

                        endPointRevenue.Publisher_Revenue__c = Decimal.valueOf(fieldData[5].replaceAll('([\\d.]+)[Ee]([-+]?\\d+)', '$1e$2')); //publisher revenue
                        System.debug('Publisher Revenue: ' + endPointRevenue.Publisher_Revenue__c);

                        endPointRevenue.Handled_Request__c = Decimal.valueOf(fieldData[6].replaceAll('[^.\\d]','')); // handled_auctions
                        endPointRevenue.Impressions__c = Decimal.valueOf(fieldData[7].replaceAll('[^.\\d]',''));  // impression
                        // DateTimeUTC field from source - Mapping not done
                        // Unique Key = day + Publisher_name + endpoint + adType
                        endPointRevenue.Unique_Key__c    = fieldData[0]+'~'+fieldData[1]+'~'+fieldData[2]+'~'+fieldData[3];
                        
                        endpointRevenueDataList.add(endPointRevenue);

                    }
                }
                i++;
            }
        }

        else if(totalNoOfRecords.Size()==1){
            system.debug('File has Header' );
            system.debug('Header' +totalNoOfRecords.get(0));                   
            DebugLogException.debug('FileName '+FileName);
        }
        system.debug('22222222-------totalNoOfRecordsAllFiles.size()  ::: '+endpointRevenueDataList.size() );
        return endpointRevenueDataList;
    }

    
/**************************************************************************************
* @Description  Helper method to process endpoint records
* @Param        endPointRecords(List<Endpoint_Revenue__c>), revenueDailyMap(Map<String, Revenue_Daily__c>), 
                platformAccountMap(Sovrn_Platform_Account__c>), revenueSummaryMap(Map<String, Revenue_Summary__c>)
**************************************************************************************/
    public ExecuteMethodResult processEndpointRecords( List<Endpoint_Revenue__c> endPointRecords, Map<String, Revenue_Daily__c> revenueDailyMap, Map<String, Sovrn_Platform_Account__c> platformAccountMap, Map<String, Revenue_Summary__c> revenueSummaryMap) {
    
        // Store unique Keys for revenue daily records that are created
		Set<String> uniqueRevenueDailyKeysCreated = new Set<String>();
                
      	List<Revenue_Daily__c> revenueDailyRecordsToCreate = new List<Revenue_Daily__c>();
      	List<Endpoint_Revenue__c> endpointRecordsToUpdate = new List<Endpoint_Revenue__c>();
      	List<Sovrn_Debug_Log__c> debugLog = new List<Sovrn_Debug_Log__c>();
                                            
        for (Endpoint_Revenue__c endPointRecord : endPointRecords) {
            // Check if gross revenue is greater than 1 cent
            if(endPointRecord.Gross_Revenue__c >= 0.01){
                string uniqueKeyFormula = String.valueOf(endPointRecord.Date__c)+ '-' + 'EXCHANGE' + '-' + endPointRecord.Publisher_Name__c;
                Revenue_Daily__c revenueDailyRecord = revenueDailyMap.get(uniqueKeyFormula);
                Sovrn_Platform_Account__c platformAccount = platformAccountMap.get(endPointRecord.Publisher_Name__c);
    
                // Check if there exists a revenue daily account, and if exists then verify the Account, Platform id and Revenue Summary parent fields on the revenue daily object
                // Also check if the revenue daily's platform id is same as the platform id that we get using publisher name (getPlatformAccountIdByPublisherName)
                // Parent account should be same on both revenue daily and platform id objects
                if (revenueDailyRecord != null && platformAccount != null
                    && revenueDailyRecord.Account__c != null 
                    && revenueDailyRecord.Sovrn_Platform_Account__c != null 
                    && revenueDailyRecord.Revenue_Summary__c != null 
                    && revenueDailyRecord.Sovrn_Platform_Account__c == platformAccount.Id 
                    && revenueDailyRecord.Account__c == platformAccount.Account__c) {
    
                    endPointRecord.Account__c = revenueDailyRecord.Account__c;
                    endPointRecord.Platform_Account_ID__c = revenueDailyRecord.Sovrn_Platform_Account__c;
                    endPointRecord.Revenue_Daily__c = revenueDailyRecord.Id;
                    endpointRecordsToUpdate.add(endPointRecord);
                }
    
                // If there exists no platform id with the publisher name
                else if(platformAccount == null){
                    debugLog = addDebugLog('No platform account found with the given publisher name- ' + endPointRecord.Publisher_Name__c + ', on- ' + endPointRecord.Date__c.year() + '-' + endPointRecord.Date__c.month() + '-' + endPointRecord.Date__c.day(), debugLog);                    
                }
    
                // If the Parent Account on Revenue Daily and Platform Account do not match
                else if(revenueDailyRecord != null && revenueDailyRecord.Account__c !=  platformAccount.Account__c){
                    debugLog = addDebugLog('Accounts do not match for the endpoint with platform id- ' + endPointRecord.Publisher_Name__c + ', on- ' + endPointRecord.Date__c.year() + '-' + endPointRecord.Date__c.month() + '-' + endPointRecord.Date__c.day(), debugLog);
                }
    
    
                // If there exists no Revenue Daily record for the endpoint, create a new one
                else if(revenueDailyRecord == NULL){
                    // Get revenue summary using unique key
                    // The revenue summary record has start_date as first of every month
                    Date startOfMonth = Date.newInstance(endPointRecord.Date__c.year(), endPointRecord.Date__c.month(), 1);
                    String revSummaryUniqueKey = String.valueOf(startOfMonth)+ '-' + 'EXCHANGE' + '-' + endPointRecord.Publisher_Name__c;
                    Revenue_Summary__c revSummary = revenueSummaryMap.get(revSummaryUniqueKey);
                    
                    // If Revenue Summary does not exist
                    if(revSummary == null || !(revSummary.Start_Date__c <= endPointRecord.Date__c && revSummary.End_Date__c >= endPointRecord.Date__c)){
                        debugLog = addDebugLog('Revenue Summary record not found for the endpoint with platform id- ' + endPointRecord.Publisher_Name__c + ', on- ' + endPointRecord.Date__c.year() + '-' + endPointRecord.Date__c.month() + '-' + endPointRecord.Date__c.day(), debugLog);
                    }
                    
                    else if(platformAccount != NULL && revSummary != NULL && revSummary.Start_Date__c <= endPointRecord.Date__c && revSummary.End_Date__c >= endPointRecord.Date__c){
                        // Check if revenue daily record is already created using the uniqueRevenueDailyKeysCreated set to make sure only one revenue daily account is created on each date per product family
                        if(!uniqueRevenueDailyKeysCreated.contains(uniqueKeyFormula)){    
                            
                            // Create new Revenue_Daily__c record
                            Revenue_Daily__c newRevenueDailyRecord = new Revenue_Daily__c(
                                Account__c = platformAccount.Account__c,
                                Sovrn_Platform_Account__c = platformAccount.Id,
                                Revenue_Summary__c = revSummary.Id,
                                Unique_Key__c = uniqueKeyFormula,
                                Publisher_Revenue__c = endPointRecord.Publisher_Revenue__c,
                                Gross_Revenue__c = endPointRecord.Gross_Revenue__c,
                                Net_Revenue__c = endPointRecord.Gross_Revenue__c - endPointRecord.Publisher_Revenue__c,
                                Date__c = endPointRecord.Date__c,
                                Product_Family__c = 'Exchange'
                            );
                            revenueDailyRecordsToCreate.add(newRevenueDailyRecord);
    
                            // Update the Endpoint_Revenue__c record with the new Revenue_Daily__c record details
                            endPointRecord.Account__c = newRevenueDailyRecord.Account__c;
                            endPointRecord.Platform_Account_ID__c = newRevenueDailyRecord.Sovrn_Platform_Account__c;
                            endpointRecordsToUpdate.add(endPointRecord);
                            
                            uniqueRevenueDailyKeysCreated.add(uniqueKeyFormula);
    
                        }
                        
                        // If already exists, get the revenue daily from revenueDailyRecordsToCreate
                        else{
                            for(Revenue_Daily__c revenueDaily : revenueDailyRecordsToCreate){
                                if(revenueDaily.Unique_Key__c == uniqueKeyFormula){
                                    // Update the Endpoint_Revenue__c record with the new Revenue_Daily__c record details
                                    endPointRecord.Account__c = revenueDaily.Account__c;
                                    endPointRecord.Platform_Account_ID__c = revenueDaily.Sovrn_Platform_Account__c;
                                    endpointRecordsToUpdate.add(endPointRecord);
                                }
                            }
                        }
                    
                    }
                }

            }
            
            else{
                debugLog = addDebugLog('Gross Revenue is less than 0.01 for the endpoint with platform id- ' + endPointRecord.Publisher_Name__c + ', on- ' + endPointRecord.Date__c.year() + '-' + endPointRecord.Date__c.month() + '-' + endPointRecord.Date__c.day(), debugLog);
            }
        }
        
        return new ExecuteMethodResult(revenueDailyRecordsToCreate, endpointRecordsToUpdate, debugLog);
    }
    
/**************************************************************************************
* @Description  Helper method to create debug logs with error messages
* @Param        errorMessage(String), debugLogList(List<Sovrn_Debug_Log__c>)
* @Return       List of Sovrn Debug Log records
**************************************************************************************/
    public List<Sovrn_Debug_Log__c> addDebugLog(String errorMessage, List<Sovrn_Debug_Log__c> debugLogList) {
        Sovrn_Debug_Log__c log = new Sovrn_Debug_Log__c(
            Error_Message__c = errorMessage,
            User__c = UserInfo.getUserId(),
            Log_Type__c = 'Info',
            Log_Origin__c = 'Apex',
            Class_Name__c = 'EndpointRevenueBatch',
            Related_To_Object__c = 'Endpoint Revenue'
        );
        debugLogList.add(log);
        
        return debugLogList;
    }
    
/**************************************************************************************
* @Description  Helper method to get the revenue daily map using uniqueKeys
* @Param        uniqueKeys(Set<String>)
* @Return       Map with key-value pair as Unique_Key__c and RevenueDaily records
**************************************************************************************/   
    public Map<String, Revenue_Daily__c> getRevenueDailyMap(Set<String> uniqueKeys) {
        Map<String, Revenue_Daily__c> revenueDailyMap = new Map<String, Revenue_Daily__c>();
        for (Revenue_Daily__c record : [SELECT Id, Account__c, Sovrn_Platform_Account__c, Unique_Key__c, Revenue_Summary__c FROM Revenue_Daily__c WHERE Unique_Key__c IN :uniqueKeys]) {
            revenueDailyMap.put(record.Unique_Key__c, record);
        }
        return revenueDailyMap;
    }
    
/**************************************************************************************
* @Description  Helper method to get the Platform Account map using Publisher Names
* @Param        publisherNames(Set<String>)
* @Return       Map with key-value pair as Unique_Key__c and RevenueDaily records
**************************************************************************************/  
    public Map<String, Sovrn_Platform_Account__c> getPlatformAccountMap(Set<String> publisherNames) {
        Map<String, Sovrn_Platform_Account__c> platformAccountMap = new Map<String, Sovrn_Platform_Account__c>();
        for (Sovrn_Platform_Account__c record : [SELECT Id, Account__c, Name FROM Sovrn_Platform_Account__c WHERE Name IN :publisherNames]) {
            platformAccountMap.put(record.Name, record);
        }
        return platformAccountMap;
    }
    
 /**************************************************************************************
* @Description  Helper method to get the revenue summary map
* @Param        uniqueKeys(Set<String>)
* @Return       Map with key-value pair as Unique_Key__c and RevenueSummary records
**************************************************************************************/  
    public Map<String, Revenue_Summary__c> getRevenueSummaryMap(Set<String> uniqueKeys) {
        Map<String, Revenue_Summary__c> revenueSummaryMap = new Map<String, Revenue_Summary__c>();
        Set<String> revSummaryUniqueKeys = new Set<String>();
        
        // Change the unique keys to get revenue summary records
        for(String uniqueKey: uniqueKeys){
            List<String> uniqueKeyParts = uniqueKey.split('-EXCHANGE-');
            String yearPart = uniqueKeyParts[0].split('-')[0];
            String monthPart = uniqueKeyParts[0].split('-')[1];
            String publisherName = uniqueKeyParts[1];
            
            revSummaryUniqueKeys.add(yearPart + '-' + monthPart + '-01-EXCHANGE-' + publisherName);
        }
        
        for (Revenue_Summary__c record : [SELECT Id, Account__c, Sovrn_Platform_Account__c, Unique_Key__c, Start_Date__c, End_Date__c, Product_Family__c FROM Revenue_Summary__c WHERE Unique_Key__c IN :revSummaryUniqueKeys ]) {
            revenueSummaryMap.put(record.Unique_Key__c, record);
        }
        
        return revenueSummaryMap;
    }

    /**************************************************************************************
* @Description  Upsert Endpoint Revenue records
* @Param        endPointRevenueList(list<Endpoint_Revenue__c> )
* @Return       NA
* @Example      EndpointRevenueBatch.upsertEndpointRevenue(endPointRevenueList);
**************************************************************************************/
    public static void upsertEndpointRevenue(list<Endpoint_Revenue__c> endPointRevenueList){
        if(endPointRevenueList.size() > 0){
            upsert endPointRevenueList Unique_Key__c;
        }
    }
}
